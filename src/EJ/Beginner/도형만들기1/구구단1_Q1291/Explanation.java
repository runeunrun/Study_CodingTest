package EJ.Beginner.도형만들기1.구구단1_Q1291;

public class Explanation {

    public static void main(String args[]) {
        int s;
        int e;
        int k;
//        구구단 구분 1번
        for (k = 2; k <= 9; k++) {
            System.out.print("[ " + k + " 단 ]" + "\t");
        }
        System.out.println();
//        구구단 2번

        /*
         * 오른쪽으로 2단부터 9단까지 똑같은 수를 곱하는 식을 나열한 후,
         * 아래로 똑같이 2단부터 9단까지 똑같은 수 (위보다 1이 추가된 수)를 곱하는 식을 나열
         * 그러므로 세로로 한줄씩 2*1, 2*2, 2*3...같이 나열되는 일반적인 구구단은 "단"을 고정하고 "곱하는 수"에 1을 더하는 작업을 반복 수행하면서 출력하게 됨
         * 그런데 지금은 옆으로 "곱하는 수"를 고정하고 "단"을 1씩 더하는 작업을 반복 수행하면서 출력하는 경우!!
         * 이중반복문의 바깥 for문은 보통 일단 고정하는 부분: 안의 반복문의 반복을 완전히 끝까지 수행한 후에 겉의 반복문이 다음 반복으로 넘어가게 됨
         *   -> 그러니까 s("*1")의 반복문 안에서(1을 곱하는 반복문을 고정) e("2~9")를 2에서부터 9까지 1씩 추가하고 결과를 출력하는 작업을 반복문을 9까지(끝까지) 수행한 뒤,
         *       -> 겉의 반복문 s의 수를 2로 증가시키게 됨 -> 그리고 그 안의 e를 다시 2~9로 증가시키고 출력을 반복 -> 그리고 s를 3으로 증가 -> ...(s가 9가 될 때까지 반복)
         * */
        for (s = 1; s <= 9; s++) { // s가 곱하는 수:
            ///3번
            for (e = 2; e <= 9; e++) {
                System.out.print(e + " * " + s + "= " + (s * e) + "\t"); //왜 s와 e 순서가 아니고 e와 s로 해야 정답이 나오는지 의문이다
            }
            System.out.println();
        }

        /* 일반적인 구구단 (단별로 세로로 나열) */
//        for(int i=2; i<=9; i++) { // i는 "단"이니까 2단/3단/4단.../으로 고정하고
//            for(int j=1; j<=9; j++) { // j는 "곱하는 수"니까 각 단 안에서 1부터 9까지 1씩 증가시키고 동시에 결과를 출력
//                System.out.print(i + " * " + j + " = " + i*j + "\t");
//            }
//            System.out.println();
//        }

    }
}
